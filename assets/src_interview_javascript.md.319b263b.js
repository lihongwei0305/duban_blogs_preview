import{_ as s,c as n,o as a,N as l}from"./chunks/framework.d9f2368f.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/interview/javascript.md"}'),p={name:"src/interview/javascript.md"},o=l(`<h2 id="e56性特性" tabindex="-1">E56性特性 <a class="header-anchor" href="#e56性特性" aria-label="Permalink to &quot;E56性特性&quot;">​</a></h2><ol><li>let const</li><li>模板字符串</li><li>Sst Map</li><li>解构赋值</li><li>展开运算符、剩余参数</li><li>箭头函数、函数参数设置默认值</li><li>模块化的导入导出</li><li>数组方法的扩展（find、findIndex、reduce、some）</li><li>字符串方法的扩展（startWidth、endWidth、repeat、padStart、padEnd、includes）</li><li>Class</li><li>Symbol</li><li>迭代器、生成器</li><li>Promise</li></ol><h2 id="var-let-const-区别" tabindex="-1">var let const 区别 <a class="header-anchor" href="#var-let-const-区别" aria-label="Permalink to &quot;var let const 区别&quot;">​</a></h2><ul><li>声明变量时都会发生变量提升 <ul><li>var会提到全局作用域或者函数作用域顶端</li><li>let cont 会提到当前作用域的顶端</li></ul></li><li>重复申明问题</li></ul><h2 id="mvvm" tabindex="-1">MVVM <a class="header-anchor" href="#mvvm" aria-label="Permalink to &quot;MVVM&quot;">​</a></h2><p>MVVM是view和vieModal通过数据绑定实现一个双向的通信，当modal发生变化时，viewModal会通知view进行更新，当view发生变化时，viewModal会将新的数据传递给modal</p><h2 id="什么是原型链" tabindex="-1">什么是原型链 <a class="header-anchor" href="#什么是原型链" aria-label="Permalink to &quot;什么是原型链&quot;">​</a></h2><p>原型链是实现继承和查找的一种机制，在JavaScript中每个对象都有一个指向其原型的链接，这个链接称为原型链</p><h2 id="什么是构造函数" tabindex="-1">什么是构造函数 <a class="header-anchor" href="#什么是构造函数" aria-label="Permalink to &quot;什么是构造函数&quot;">​</a></h2><p>构造函数是用来创建对象的一种特殊函数，使用new关键字来调用</p><ol><li>创建一个新对象（实例对象）</li><li>将实例对象的<code>__proto__</code>指向构造函数的<code>protoType</code></li><li>将构造函数的作用域赋值给新对象（this指向新对象）</li><li>执行构造函数的内部代码，并给新对象赋值</li></ol><h2 id="箭头函数和普通函数的区别" tabindex="-1">箭头函数和普通函数的区别 <a class="header-anchor" href="#箭头函数和普通函数的区别" aria-label="Permalink to &quot;箭头函数和普通函数的区别&quot;">​</a></h2><ul><li>语法不同</li><li>this绑定：箭头函数的this是继承父级的作用域。普通函数的this是在运行时根据函数的调用方式决定的</li><li>arguments：箭头函数没有arguments，但可以通过剩余参数来代替。普通函数可以通过arguments访问传递的参数</li><li>构造函数：箭头函数不能使用new关键字</li><li>返回值：箭头函数可以通过简洁的语法来返回表达式。普通函数需要使用return。</li></ul><h2 id="async标记的函数和普通函数的区别" tabindex="-1">async标记的函数和普通函数的区别 <a class="header-anchor" href="#async标记的函数和普通函数的区别" aria-label="Permalink to &quot;async标记的函数和普通函数的区别&quot;">​</a></h2><ul><li>async标记的函数返回的是一个Promise</li><li>判断一个函数是不是被async标记：</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme"><code><span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#EEFFFF;">(fn) </span><span style="color:#546E7A;font-style:italic;">// [object AsyncFunction]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><ul><li>闭包是指函数与其相关的引用环境的组合体,这个环境包含了在函数声明时所能访问到的所有变量和参数,并在执行过程中始终存在</li></ul><h3 id="闭包的几种表现形式" tabindex="-1">闭包的几种表现形式 <a class="header-anchor" href="#闭包的几种表现形式" aria-label="Permalink to &quot;闭包的几种表现形式&quot;">​</a></h3><ol><li>返回一个函数</li><li>作为函数参数传递</li><li>回调函数</li><li>立即执行函数</li></ol><h2 id="防抖和节流" tabindex="-1">防抖和节流 <a class="header-anchor" href="#防抖和节流" aria-label="Permalink to &quot;防抖和节流&quot;">​</a></h2><ul><li><a href="/duban_blogs_preview/src/frontEnd/javaScript/jsAdvanced.html#防抖">防抖</a></li><li><a href="/duban_blogs_preview/src/frontEnd/javaScript/jsAdvanced.html#节流">节流</a></li></ul><h2 id="模拟微任务" tabindex="-1">模拟微任务 <a class="header-anchor" href="#模拟微任务" aria-label="Permalink to &quot;模拟微任务&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#EEFFFF;"> </span><span style="color:#82AAFF;">createMicroTask</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">text</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createTextNode</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">ob</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">MutationObserver</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#EEFFFF;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">变化了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">callback</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#EEFFFF;">ob</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#F07178;">(</span><span style="color:#EEFFFF;">text</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        characterData</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#EEFFFF;">text</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">textContent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="假设前端需要发n请求-写一个方法同时只并发3个请求-直到n个请求完成" tabindex="-1">假设前端需要发n请求,写一个方法同时只并发3个请求,直到n个请求完成 <a class="header-anchor" href="#假设前端需要发n请求-写一个方法同时只并发3个请求-直到n个请求完成" aria-label="Permalink to &quot;假设前端需要发n请求,写一个方法同时只并发3个请求,直到n个请求完成&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#EEFFFF;"> </span><span style="color:#C792EA;">function</span><span style="color:#EEFFFF;"> </span><span style="color:#82AAFF;">sendRequests</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;font-style:italic;">requests</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#EEFFFF;font-style:italic;">concurrency</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">results</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">currentIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">currentPromise</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sendNestRequest</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">currentIndex</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#EEFFFF;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">requests</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sendRequest</span><span style="color:#F07178;">(</span><span style="color:#EEFFFF;">requests</span><span style="color:#F07178;">[</span><span style="color:#EEFFFF;">index</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#EEFFFF;">results</span><span style="color:#F07178;">[</span><span style="color:#EEFFFF;">index</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">res</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sendNestRequest</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sendRequest</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;font-style:italic;">request</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#EEFFFF;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#EEFFFF;">request</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> is Complated</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#EEFFFF;">request</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">concurrency</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#EEFFFF;">currentPromise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">sendNestRequest</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">all</span><span style="color:#F07178;">(</span><span style="color:#EEFFFF;">currentPromise</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">results</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#EEFFFF;"> requests </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">13</span><span style="color:#EEFFFF;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#EEFFFF;"> concurrency </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">sendRequests</span><span style="color:#EEFFFF;">(requests</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> concurrency)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#EEFFFF;">(</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#EEFFFF;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#EEFFFF;">res</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#EEFFFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div>`,26),e=[o];function F(r,t,c,y,i,D){return a(),n("div",null,e)}const b=s(p,[["render",F]]);export{u as __pageData,b as default};
