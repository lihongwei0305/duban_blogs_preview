import{_ as a,c as l,o as i,N as e}from"./chunks/framework.d9f2368f.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/network/NetworkLayer.md"}'),o={name:"src/network/NetworkLayer.md"},r=e(`<h2 id="概念" tabindex="-1">概念： <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念：&quot;">​</a></h2><ol><li>提供了通讯过程中必须使用的逻辑地址----IP地址</li><li>负责连接不同的媒介类型</li><li>根据运行的不同动态路由协议来选择不同的最佳路径</li><li>在选择好的最佳路径上负责路由数据包</li></ol><h2 id="ip地址的分类" tabindex="-1">IP地址的分类 <a class="header-anchor" href="#ip地址的分类" aria-label="Permalink to &quot;IP地址的分类&quot;">​</a></h2><ol><li>A类【1 - 126】</li><li>B类【128 - 191】</li><li>C类【192 - 223】</li><li>D类【224 - 239】</li><li>E类【240 - 254】</li></ol><h3 id="私有网段" tabindex="-1">私有网段 <a class="header-anchor" href="#私有网段" aria-label="Permalink to &quot;私有网段&quot;">​</a></h3><ul><li>10.0.0.0 / 8</li><li>172.16.0.0 - 172.31.255.255 / 12</li><li>192.168.0.0 - 192.168.255.255 / 16</li></ul><h2 id="子网掩码" tabindex="-1">子网掩码 <a class="header-anchor" href="#子网掩码" aria-label="Permalink to &quot;子网掩码&quot;">​</a></h2><h3 id="作用-用来区分不同的网段的" tabindex="-1">作用： 用来区分不同的网段的 <a class="header-anchor" href="#作用-用来区分不同的网段的" aria-label="Permalink to &quot;作用： 用来区分不同的网段的&quot;">​</a></h3><h2 id="路由器路由数据包的过程" tabindex="-1">路由器路由数据包的过程 <a class="header-anchor" href="#路由器路由数据包的过程" aria-label="Permalink to &quot;路由器路由数据包的过程&quot;">​</a></h2><ol><li>在不使用NAT的前提下，路由器路由数据包时，三层的源IP与目标IP地址始终保持不变化</li><li>路由器会不断的使自身接口地址的MAC地址做二层重写，直至将数据报文路由至目的节点</li><li>路由器每一个接口都有一个独立的MAC地址</li></ol><h2 id="单臂路由" tabindex="-1">单臂路由 <a class="header-anchor" href="#单臂路由" aria-label="Permalink to &quot;单臂路由&quot;">​</a></h2><h4 id="作用-用来实现不同vlan且不同网段间的用户的通信" tabindex="-1">作用：用来实现不同VLAN且不同网段间的用户的通信 <a class="header-anchor" href="#作用-用来实现不同vlan且不同网段间的用户的通信" aria-label="Permalink to &quot;作用：用来实现不同VLAN且不同网段间的用户的通信&quot;">​</a></h4><h4 id="核心技术-路由器划分子接口-在子接口上封装vlan-并开启arp广播功能" tabindex="-1">核心技术：路由器划分子接口，在子接口上封装VLAN，并开启ARP广播功能 <a class="header-anchor" href="#核心技术-路由器划分子接口-在子接口上封装vlan-并开启arp广播功能" aria-label="Permalink to &quot;核心技术：路由器划分子接口，在子接口上封装VLAN，并开启ARP广播功能&quot;">​</a></h4><h2 id="动态路由" tabindex="-1">动态路由 <a class="header-anchor" href="#动态路由" aria-label="Permalink to &quot;动态路由&quot;">​</a></h2><h3 id="动态路由协议的概念" tabindex="-1">动态路由协议的概念 <a class="header-anchor" href="#动态路由协议的概念" aria-label="Permalink to &quot;动态路由协议的概念&quot;">​</a></h3><ol><li>会从其他路由器那里接收路由信息</li><li>会主动向其它路由器发送路由信息</li><li>会利用接收到的路由信息来计算最佳路径，并生成路由表项</li><li>会对网络的变化做出及时的调整，并将调整后的路由继续向下传递</li></ol><h2 id="动态路由协议的分类" tabindex="-1">动态路由协议的分类 <a class="header-anchor" href="#动态路由协议的分类" aria-label="Permalink to &quot;动态路由协议的分类&quot;">​</a></h2><h3 id="_1-按使用的范围进行划分" tabindex="-1">1. 按使用的范围进行划分 <a class="header-anchor" href="#_1-按使用的范围进行划分" aria-label="Permalink to &quot;1. 按使用的范围进行划分&quot;">​</a></h3><pre><code>    1. 内部网关路由协议【IGP】：RIP、IGRP、IS-IS --- 用于单一自治系统【AS】内决策路由协议
    2. 外部网关路由协议【EGP】：BGP --- 用于连接不同的【AS】，使之能够相互通讯
</code></pre><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>执行统一路由策略的一组设备的集合</p></div><h3 id="_2-按算法进行划分" tabindex="-1">2. 按算法进行划分 <a class="header-anchor" href="#_2-按算法进行划分" aria-label="Permalink to &quot;2. 按算法进行划分&quot;">​</a></h3><pre><code>    1. 距离矢量型路由协议：RIP
    2. 链路状态路由协议：OSPF、IS-IS
    3. 混合型路由协议
</code></pre><h2 id="rip路由协议" tabindex="-1">RIP路由协议 <a class="header-anchor" href="#rip路由协议" aria-label="Permalink to &quot;RIP路由协议&quot;">​</a></h2><ul><li>RIP是为TCP/IP环境中开发的第一个路由选择协议标准</li><li>RIP是一个【距离 - 矢量】路由选择协议</li></ul><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><ol><li>运行RIP的路由器平均每隔30s发送整张路由表项给自身直连的邻居路由器</li><li>当全网所有的路由器的路由表项到达高度一致的情况下，就称该网络完成了收敛，只有收敛的网络才能够正常的工作并路由数据包</li><li>RIP以跳数作为其唯一的选路度量依据</li><li>RIP最大支持15跳，16跳将会被标记为不可到达</li></ol><h3 id="rip的环路防止" tabindex="-1">RIP的环路防止 <a class="header-anchor" href="#rip的环路防止" aria-label="Permalink to &quot;RIP的环路防止&quot;">​</a></h3><ol><li>RIP容易产生路由环路，为防止环路的发生，故使用水平分割机制</li><li>水平分割是一种规则，该规则规定：从一个接口学习到的路由条目，就不在通过这个接口发送回去了，通过该方式防止路由环路的发生</li><li>水平分割机制默认在接口上启用</li></ol><h3 id="有类路由与无类路由" tabindex="-1">有类路由与无类路由 <a class="header-anchor" href="#有类路由与无类路由" aria-label="Permalink to &quot;有类路由与无类路由&quot;">​</a></h3><ol><li>有类路由【Classful】：在通告路由时，不携带子网掩码</li><li>无类路由【Classless】：在通告路由时，会携带子网掩码</li></ol><h3 id="rip的版本" tabindex="-1">RIP的版本 <a class="header-anchor" href="#rip的版本" aria-label="Permalink to &quot;RIP的版本&quot;">​</a></h3><ol><li>RIPv1：有类路由，使用广播更新，更新地址：255.255.255.255</li><li>PIPv2：无类路由，使用组播更新，更新地址：224.0.0.9</li></ol><h2 id="ospf" tabindex="-1">OSPF <a class="header-anchor" href="#ospf" aria-label="Permalink to &quot;OSPF&quot;">​</a></h2><h3 id="router-id" tabindex="-1">Router-ID <a class="header-anchor" href="#router-id" aria-label="Permalink to &quot;Router-ID&quot;">​</a></h3><ul><li>是在OSPF区域内唯一标识一台路由器的IP地址</li></ul><h3 id="router-id选取规则" tabindex="-1">Router Id选取规则 <a class="header-anchor" href="#router-id选取规则" aria-label="Permalink to &quot;Router Id选取规则&quot;">​</a></h3><ul><li>首先,路由器选取它所有loopback接口上数值最高的IP地址</li><li>如果没有Loopback,就在所有物理端口中选取一个数值最高的IP地址</li></ul><h3 id="ospf维护的表项" tabindex="-1">OSPF维护的表项 <a class="header-anchor" href="#ospf维护的表项" aria-label="Permalink to &quot;OSPF维护的表项&quot;">​</a></h3><ol><li>邻接关系表【邻居表】：保存着直连邻居的路由信息</li><li>链路状态数据库表【Link State DataBase | LSDB】：全网最完整的链路信息</li><li>路由表：保存着到达其他网络节点的最佳路径</li></ol><h3 id="ospf建立邻接关系的过程" tabindex="-1">OSPF建立邻接关系的过程 <a class="header-anchor" href="#ospf建立邻接关系的过程" aria-label="Permalink to &quot;OSPF建立邻接关系的过程&quot;">​</a></h3><ul><li>7种状态： <ol><li>Down</li><li>Init</li><li>2-Wwy</li><li>Exstart</li><li>Exchange</li><li>Loading</li><li>Full</li></ol></li><li>5种报文： <ol><li>Hello</li><li>DBD【DataBase Description】</li><li>LSR【Link State Request】</li><li>LSU【Link State Update】</li><li>LSAck</li></ol></li></ul><h3 id="ospf-多区域应用及高级配置" tabindex="-1">OSPF 多区域应用及高级配置 <a class="header-anchor" href="#ospf-多区域应用及高级配置" aria-label="Permalink to &quot;OSPF 多区域应用及高级配置&quot;">​</a></h3><h4 id="ospf-生成多区域作用" tabindex="-1">OSPF 生成多区域作用 <a class="header-anchor" href="#ospf-生成多区域作用" aria-label="Permalink to &quot;OSPF 生成多区域作用&quot;">​</a></h4><ol><li>加快路由的收敛速度</li><li>改善网络的可扩展性</li></ol><h4 id="ospf路由器类型" tabindex="-1">OSPF路由器类型 <a class="header-anchor" href="#ospf路由器类型" aria-label="Permalink to &quot;OSPF路由器类型&quot;">​</a></h4><ol><li>内部路由器</li><li>骨干路由器</li><li>区域边界路由器【ABR】</li><li>自治系统边界路由器【ASBR】</li></ol><h3 id="ospf-区域类型" tabindex="-1">OSPF 区域类型 <a class="header-anchor" href="#ospf-区域类型" aria-label="Permalink to &quot;OSPF 区域类型&quot;">​</a></h3><ol><li>骨干区域</li><li>非骨干区域 <ol><li>标准区域 <ul><li>可以学习所有理由</li></ul></li><li>末节/末梢区域</li><li>完全末节区域</li><li>非纯末节区域</li><li>非纯完全末节区域 <ul><li>只学习域内路由，本区域可以包含ASBR路由器，自身可以引入并学习外部路由；域间路由不在学习</li></ul></li></ol></li></ol>`,48),t=[r];function h(n,s,d,c,u,P){return i(),l("div",null,t)}const f=a(o,[["render",h]]);export{q as __pageData,f as default};
