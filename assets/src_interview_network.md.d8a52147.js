import{_ as t,c as e,o as l,N as i}from"./chunks/framework.d9f2368f.js";const _=JSON.parse('{"title":"NetWork","description":"","frontmatter":{},"headers":[],"relativePath":"src/interview/network.md"}'),a={name:"src/interview/network.md"},r=i('<h1 id="network" tabindex="-1">NetWork <a class="header-anchor" href="#network" aria-label="Permalink to &quot;NetWork&quot;">​</a></h1><table><thead><tr><th style="text-align:center;">HTTP状态码</th><th></th><th></th></tr></thead><tbody><tr><td style="text-align:center;"></td><td>具体含义</td><td>常见的状态码</td></tr><tr><td style="text-align:center;">1xx</td><td>提示信息，表示目前协议处理的中间状态</td><td></td></tr><tr><td style="text-align:center;">2xx</td><td>成功，报文已经收到并被正确处理</td><td>200、204、206</td></tr><tr><td style="text-align:center;">3xx</td><td>重定向，资源位置发生变动，需要客户端重新发生请求</td><td>301、302、304</td></tr><tr><td style="text-align:center;">4xx</td><td>客户端错误，请求报文有误，服务器无法处理</td><td>400、403、404</td></tr><tr><td style="text-align:center;">5xx</td><td>服务器错误，服务器正处理请求时内部发生了错误</td><td>500、501、502、503</td></tr></tbody></table><h2 id="为什么要有-tcp-ip-网络模型" tabindex="-1">为什么要有 TCP/IP 网络模型？ <a class="header-anchor" href="#为什么要有-tcp-ip-网络模型" aria-label="Permalink to &quot;为什么要有 TCP/IP 网络模型？&quot;">​</a></h2><p>对于同一台设备上的进程通信，有很多方式，比如有管道、消息队列、共享内存、信号等方式，而对于不同设备上的进程通信，就需要网络通信，而设备是多样性的，所以要兼容多种设备，就协商出了一套通用的网络协议，这样就可以实现网络的互联互通。</p><h2 id="tcp-ip-网络模型有几层" tabindex="-1">TCP/IP 网络模型有几层 <a class="header-anchor" href="#tcp-ip-网络模型有几层" aria-label="Permalink to &quot;TCP/IP 网络模型有几层&quot;">​</a></h2><ul><li>应用层 <ul><li>我们直接接触到的就是应用层，比如电脑、手机上的软件就是在应用层实现的，当两台设备需要通信时，应用层就把数据传递给下一层，也就是传输层。</li><li>应用层只需专注为用户提供应用功能，比如HTTP、FTP、DNS等，所以应用层不用去关心数据如何传输的。</li><li>应用层是工作在操作系统中的用户态，传输层及其一下是内核态。</li></ul></li><li>传输层 <ul><li>为应用层提供网络支持的，作为应用传输数据的媒介，帮助实现应用到应用的通信，而实际的传输功能交个下一层，网络层。</li><li>有两个传输协议<a href="#tcp和upd">TCP和UDP</a></li></ul></li><li>网络层 <ul><li>最常用的就是ip协议，ip协议会将传输层的报文作为数据部分，再加上ip包头组成ip报文</li><li>负责将数据从一台设备传输到另一台设备</li></ul></li><li>链路层（网络接口层）</li></ul><h2 id="tcp和upd" tabindex="-1">TCP和UPD <a class="header-anchor" href="#tcp和upd" aria-label="Permalink to &quot;TCP和UPD&quot;">​</a></h2><h3 id="tcp" tabindex="-1">TCP <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;TCP&quot;">​</a></h3><ul><li>面向连接：在通信之前需要建立连接，通过三次握手确保可靠的通信。</li><li>可靠性：提供可靠的数据传输，保证数据的顺序和完整性。</li><li>流式传输：将数据切分成小的数据段，通过序列号和确认机制进行传输。</li><li>慢启动和拥塞控制：根据网络条件动态调整传输速率，避免拥塞。</li><li>适用于可靠性要求较高的应用，如文件传输、网页浏览、电子邮件。</li></ul><h3 id="udp" tabindex="-1">UDP <a class="header-anchor" href="#udp" aria-label="Permalink to &quot;UDP&quot;">​</a></h3><ul><li>无连接：不需要建立连接，直接发送数据包。</li><li>无可靠性保证：不提供数据的顺序和完整性保证。</li><li>基于数据报文：将数据打包成数据报文，每个数据报文都是独立的实体。</li><li>高效性：没有建立连接个拥塞控制的开销，传输效率较高。</li><li>适用于实时性要求较高的应用，如音视频流媒体，实时游戏。</li></ul>',11),d=[r];function n(o,c,h,s,p,u){return l(),e("div",null,d)}const x=t(a,[["render",n]]);export{_ as __pageData,x as default};
