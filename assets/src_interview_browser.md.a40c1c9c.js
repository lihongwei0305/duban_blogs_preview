import{_ as l,c as i,o as e,N as a}from"./chunks/framework.d9f2368f.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/interview/browser.md"}'),t={name:"src/interview/browser.md"},r=a('<h2 id="浏览器有哪些进程" tabindex="-1">浏览器有哪些进程 <a class="header-anchor" href="#浏览器有哪些进程" aria-label="Permalink to &quot;浏览器有哪些进程&quot;">​</a></h2><ul><li>浏览器进程 <ul><li>主进程,负责管理整个浏览器的工作流程</li></ul></li><li>渲染进程(每个标签页都有一个渲染进程.用于解析和渲染网页内容) <ul><li>主线层:渲染线层</li><li>网络线层</li><li>布局线层</li><li>绘制线层</li><li>合成线层</li><li>垃圾回收线层</li><li>定时器线层</li><li>事件处理线层</li></ul></li><li>GPU进程</li><li>网络进程</li><li>扩展进程</li><li>插件进程</li></ul><h2 id="浏览器渲染页面的过程" tabindex="-1">浏览器渲染页面的过程 <a class="header-anchor" href="#浏览器渲染页面的过程" aria-label="Permalink to &quot;浏览器渲染页面的过程&quot;">​</a></h2><ol><li>解析HTML生成DOM树</li><li>解析CSS生成CSSOM树</li><li>合并DOM树和CSSO树，形成Render树</li><li>根据Render树来进行布局和绘制</li><li>最后浏览器会将绘制好的内容显示到屏幕上</li></ol><h2 id="浏览器在一帧会干那些事" tabindex="-1">浏览器在一帧会干那些事 <a class="header-anchor" href="#浏览器在一帧会干那些事" aria-label="Permalink to &quot;浏览器在一帧会干那些事&quot;">​</a></h2><ol><li>帧开始（Frame Start）</li><li>输入事件处理程序</li><li>requestAnimationFrame</li><li>解析HTML（Parse HTML）</li><li>重新计算样式（Recalc Styles）</li><li>布局（Layout）</li><li>更新图层树（Update Layer Tree）</li><li>绘制（Paint）</li><li>合成（Composite）</li><li>光栅化（Raster Scheduled and Rasterize）</li><li>帧结束（Frame End）</li><li>帧上传（Frame Ships）</li><li>requestIdleCallback</li></ol><h2 id="重汇和回流" tabindex="-1">重汇和回流 <a class="header-anchor" href="#重汇和回流" aria-label="Permalink to &quot;重汇和回流&quot;">​</a></h2><p>重绘（Repaint）和回流（Reflow）是浏览器渲染页面时的两个关键过程。</p><p>重绘是指当元素样式发生改变，但不影响其布局的情况下，浏览器会重新绘制（重绘）这个元素，将新的样式应用到元素上。重绘不会引起元素的位置或尺寸的变化，只会改变元素的外观。</p><p>回流是指当页面布局（大小、位置）发生改变时，浏览器需要重新计算并更新元素的布局信息，然后重新绘制页面。回流会导致元素的位置、尺寸等属性发生变化，可能涉及到其他元素的位置和尺寸的调整。</p><p>回流的代价比重绘更高，因为回流涉及到重新计算布局信息和重新绘制页面，而重绘只需要重新绘制元素的外观。因此，频繁的回流操作会影响页面性能，特别是在大型复杂的页面上。</p><p>常见触发回流的操作包括：</p><p>修改页面的结构（添加、删除、修改元素） 修改元素的布局属性（尺寸、位置、边距等） 获取某些属性值（如 offsetTop、offsetLeft、offsetWidth、offsetHeight、scrollTop、scrollLeft 等） 为了减少回流的次数，可以采取以下优化策略：</p><p>使用 CSS3 的 transform 属性代替修改元素的位置属性（如 top、left） 批量修改元素样式，或者使用 CSS 类名的方式进行一次性的样式变更 避免频繁获取需要触发回流的属性值，尽量将需要获取的属性值缓存起来 使用文档片段（DocumentFragment）进行多个 DOM 操作，然后一次性将文档片段添加到页面中 通过减少回流的次数，可以提高页面的渲染性能，提升用户体验。</p>',14),o=[r];function s(n,c,d,p,h,_){return e(),i("div",null,o)}const m=l(t,[["render",s]]);export{u as __pageData,m as default};
