import{_ as s,c as n,o as a,N as l}from"./chunks/framework.d9f2368f.js";const b=JSON.parse('{"title":"Object","description":"","frontmatter":{},"headers":[],"relativePath":"src/frontEnd/javaScript/object.md"}'),p={name:"src/frontEnd/javaScript/object.md"},e=l(`<h1 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h1><h2 id="defineproperty" tabindex="-1">defineProperty <a class="header-anchor" href="#defineproperty" aria-label="Permalink to &quot;defineProperty&quot;">​</a></h2><ul><li>修改属性的默认特性 <ul><li>[[Configurable]]: 表示属性是否可以通过delete 删除并重新定义，是否可以修改它的特 性，以及是否可以把它改为访问器属性。</li><li>[[Enumerable]]：表示属性是否可以通过for-in 循环返回。</li><li>[[Writable]]：表示属性的值是否可以被修改。</li><li>[[Value]]：包含属性实际的值。</li><li>[[Get]]：获取函数，在读取属性时调用。默认值为undefined。</li><li>[[Set]]：设置函数，在写入属性时调用。默认值为undefined。</li></ul></li><li>调用该方法时时，configurable、enumerable 和writable 的值如果不 指定，则都默认为false</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#EEFFFF;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#EEFFFF;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#EEFFFF;">(person</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#F07178;">configurable</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#F07178;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">zhangsan</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#EEFFFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="defineproperties" tabindex="-1">defineProperties <a class="header-anchor" href="#defineproperties" aria-label="Permalink to &quot;defineProperties&quot;">​</a></h2><ul><li>在一个对象上同时定义多个属性</li></ul><h2 id="getownpropertydescriptor" tabindex="-1">getOwnPropertyDescriptor <a class="header-anchor" href="#getownpropertydescriptor" aria-label="Permalink to &quot;getOwnPropertyDescriptor&quot;">​</a></h2><ul><li>可以取得指定属性的属性描述符</li></ul><h2 id="getownpropertydescriptors" tabindex="-1">getOwnPropertyDescriptors <a class="header-anchor" href="#getownpropertydescriptors" aria-label="Permalink to &quot;getOwnPropertyDescriptors&quot;">​</a></h2><ul><li>这个方法实际上会在每个自有属性上调用Object.getOwnPropertyDescriptor()并在一个新对象中返回它们。</li></ul><h2 id="asownproperty" tabindex="-1">asOwnProperty <a class="header-anchor" href="#asownproperty" aria-label="Permalink to &quot;asOwnProperty&quot;">​</a></h2><ul><li>方法用于确定某个属性是在实例上还是在原型对象上</li></ul><h2 id="对象解构" tabindex="-1">对象解构 <a class="header-anchor" href="#对象解构" aria-label="Permalink to &quot;对象解构&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme"><code><span class="line"><span style="color:#546E7A;font-style:italic;">//解构赋值的同时定义默认值</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#EEFFFF;">name</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> job </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Software engineer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> person</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">//如果是给事先声明的变量赋值，则赋值表达式必须包含在一对括号中：</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#EEFFFF;"> personName</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> personAge</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#EEFFFF;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Matt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">27</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#EEFFFF;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> personName</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> personAge</span><span style="color:#89DDFF;">}</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> person)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#EEFFFF;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#EEFFFF;">(personName</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> personAge)</span><span style="color:#89DDFF;">;</span><span style="color:#EEFFFF;"> </span><span style="color:#546E7A;font-style:italic;">// Matt, 27</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme"><code><span class="line"><span style="color:#546E7A;font-style:italic;">// 嵌套解构</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">// 解构对于引用嵌套的属性或赋值目标没有限制。为此，可以通过解构来复制对象属性：</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#EEFFFF;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Matt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">27</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#F07178;">job</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#EEFFFF;">        </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Software engineer</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#EEFFFF;"> personCopy </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#EEFFFF;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> personCopy</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> personCopy</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">age</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#F07178;">job</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> personCopy</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">job</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> person)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,15),o=[e];function F(r,t,c,i,y,D){return a(),n("div",null,o)}const u=s(p,[["render",F]]);export{b as __pageData,u as default};
