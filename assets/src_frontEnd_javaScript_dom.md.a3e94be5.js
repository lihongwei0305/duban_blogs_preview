import{_ as s,c as n,o as a,N as e}from"./chunks/framework.d9f2368f.js";const h=JSON.parse('{"title":"Dom","description":"","frontmatter":{},"headers":[],"relativePath":"src/frontEnd/javaScript/dom.md"}'),l={name:"src/frontEnd/javaScript/dom.md"},o=e(`<h1 id="dom" tabindex="-1">Dom <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;Dom&quot;">​</a></h1><h2 id="视口" tabindex="-1">视口 <a class="header-anchor" href="#视口" aria-label="Permalink to &quot;视口&quot;">​</a></h2><ul><li>innerHeight <ul><li><code>windown.innerHeight</code> DOM视口的大小，包括滚动条。</li></ul></li><li>outerHeight <ul><li><code>windown.outerHeight</code> 是整个浏览器窗口的大小，包括窗口标题、工具栏、状态栏等。</li></ul></li></ul><p>获取窗口大小存在浏览器兼容问题，通常使用下面的代码来兼容所有浏览器:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#EEFFFF;"> height </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">innerHeight</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#89DDFF;">||</span><span style="color:#EEFFFF;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">clientHeight</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#89DDFF;">||</span><span style="color:#EEFFFF;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">body</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">clientHeight</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme"><code><span class="line"><span style="color:#EEFFFF;">实上后两种方式获取的高度和window.innerHeight是不一样的，这3个属性的值逐个变小。具体说来，window.innerHeight包括整个DOM：内容、边框以及滚动条。</span></span>
<span class="line"><span style="color:#EEFFFF;"></span></span>
<span class="line"><span style="color:#EEFFFF;">1. documentElement.clientHeight不包括整个文档的滚动条，但包括&lt;html&gt;元素的边框。</span></span>
<span class="line"><span style="color:#EEFFFF;">2. body.clientHeight不包括整个文档的滚动条，也不包括&lt;html&gt;元素的边框，也不包括&lt;body&gt;的边框和滚动条</span></span>
<span class="line"><span style="color:#EEFFFF;"></span></span>
<span class="line"><span style="color:#EEFFFF;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="滚动高度" tabindex="-1">滚动高度 <a class="header-anchor" href="#滚动高度" aria-label="Permalink to &quot;滚动高度&quot;">​</a></h2><ul><li><code>clientHeight</code>: 内部可视区域大小。</li><li><code>offsetHeight</code>：整个可视区域大小，包括border和scrollbar在内。</li><li><code>scrollHeight</code>：元素内容的高度，包括溢出部分。</li><li><code>scrollTop</code>：元素内容向上滚动了多少像素，如果没有滚动则为0。</li></ul><h2 id="js拖拽" tabindex="-1">JS拖拽 <a class="header-anchor" href="#js拖拽" aria-label="Permalink to &quot;JS拖拽&quot;">​</a></h2><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme"><code><span class="line"><span style="color:#EEFFFF;">拖拽的实现原理：通过事件mousedown（事件的触发） →mousemove（事件的控制） →mouseup（事件的清除），拖拽的过程就是mousemove阶段；</span></span>
<span class="line"><span style="color:#EEFFFF;">问题产生的原因：因为mousemove 的间隔性触发，当两次mousemove事件触发的间隔中，鼠标移动距离出了element的范围，就会产生鼠标脱离element范围，拖拽就停止，</span></span>
<span class="line"><span style="color:#EEFFFF;">解决方法： 将mousemove事件挂在docment，而不是对应的element，此时鼠标滑动只要不出docment范围就不会触发上述情况。</span></span>
<span class="line"><span style="color:#EEFFFF;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,10),t=[o];function p(r,c,i,F,d,m){return a(),n("div",null,t)}const b=s(l,[["render",p]]);export{h as __pageData,b as default};
