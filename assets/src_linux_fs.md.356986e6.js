import{_ as l,c as e,o,N as s}from"./chunks/framework.d9f2368f.js";const a="/duban_blogs_preview/assets/img1.eab3380a.png",i="/duban_blogs_preview/assets/img2.eeec545e.png",c="/duban_blogs_preview/assets/img3.27c06a4c.png",n="/duban_blogs_preview/assets/img4.58a21890.png",g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/linux/fs.md"}'),d={name:"src/linux/fs.md"},t=s(`<h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><ul><li>每次登录Linux系统，bash shell都会访问/etc/profile启动文件以及3个针对每个用户的本地启动文件：$HOME/.bash_profile、$HOME/.bash_login和$HOME/.profile</li></ul><h2 id="目录类型" tabindex="-1">目录类型 <a class="header-anchor" href="#目录类型" aria-label="Permalink to &quot;目录类型&quot;">​</a></h2><ul><li><code>/etc</code> 配置文件</li><li><code>/home</code> 用户的家目录</li><li><code>/root</code> 管理员的家目录</li><li><code>/lib</code> 库文件 <ul><li>静态库 <code>.a</code></li><li>动态库 <code>.dll .so</code></li><li>内核模块文件 <code>/lib/modules</code></li></ul></li><li><code>/media</code> 挂载点目录,移动设备</li><li><code>/mnt</code> 挂载点目录,额为的临时文件系统</li><li><code>/opt</code> 可选目录,第三方程序的安装目录</li><li><code>/proc</code> 伪文件系统,内核映射文件</li><li><code>/sys</code> 伪文件系统,跟硬件设备相关的属性映射文件</li><li><code>/tmp</code> 临时文件</li><li><code>/var</code> 可变化的文件</li><li><code>/bin</code> 可执行文件,用户命令</li><li><code>/sbin</code> 管理命令</li><li></li></ul><h2 id="linux文件类型" tabindex="-1">Linux文件类型 <a class="header-anchor" href="#linux文件类型" aria-label="Permalink to &quot;Linux文件类型&quot;">​</a></h2><ul><li><code>-</code> 普通文件</li><li><code>d</code> 目录</li><li><code>c</code> 字符设备</li><li><code>l</code> 符号链接文件</li><li><code>p</code> 管道文件</li><li><code>s</code> 套接字文件,用于实现两个进程的通信</li></ul><h2 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h2><ul><li><code>touch [fileName]</code> 创建文件</li><li><code>mkdir [fileName]</code> 创建目录 <ul><li><code>-p</code> 创建嵌套目录 <ul><li>eg: <code>mkdir -p a/aa/aaa</code></li></ul></li></ul></li><li><code>cp [source] [destination]</code> 复制文件或目录 <ul><li><code>-i</code> 如果目标文件存在,询问是否需要覆盖已有文件</li><li><code>-R</code> 递归地复制整个目录的内容</li><li><code>cp /file/. /file1</code> 复制所有文件包括隐藏文件和非隐藏文件,加一个点</li><li><code>cp /file/.[^.]* /file1</code> 复制隐藏文件</li></ul></li><li><code>mv</code> 移动目录或文件</li><li><code>rm -rf [fielPath]</code> 强制删除目录或文件 <ul><li>删除除了某些文件 <ol><li>删除除了某些文件需要执行<code>shopt -s extglob</code>开启通配符功能,再执行<code>shopt -s</code>,再执行 <code>rm -rf !(file0|file1)</code></li><li><code>find * | grep -v &#39;\\(1.txt\\|2.txt\\)&#39; | xargs rm</code> 要特别注意grep的-v参数，-v参数表示反选，比如我们上面指定了-v 1.txt，即排除掉1.txt，选中其他全部文件。所以这样执行之后1.txt就被排除了</li></ol></li></ul></li><li><code>file</code> 查看文件类型</li><li><code>cat</code> 查看文件 <ul><li><code>-n</code> 显示行数</li><li><code>-b</code> 有文本的行添加行号</li></ul></li><li><code>less</code> 查看文件</li><li><code>tail</code> 查看文件(默认后10行) <ul><li><code>-f</code> 保持活动状态,并不断显示添加到文件中的内容</li></ul></li><li><code>head</code> 查看文件(默认前10行) <ul><li><code>-f</code></li></ul></li><li><code>du</code> 显示当前目录下所有的文件、目录和子目录的磁盘使用情况，它会以磁盘块为单位来表明每个文件或目录占用了多大存储空间 <ul><li><code>-c</code> 显示所有已列出文件总的大小</li><li><code>-h</code> 按用户易读的格式输出大小，即用K替代千字节，用M替代兆字节，用G替代吉字节</li><li><code>-s</code> 显示每个输出参数的总计</li></ul></li><li><code>sort</code> 排序数据 <ul><li><code>-n</code> 把数字当做字符来执行标准的字符排序</li><li><code>-M</code> 按日期排序</li><li><code>-reverse</code> 倒序</li><li><code>-t</code> 指定字段分隔符</li><li><code>-k</code> 指定排序的字段</li></ul></li><li><code>grep</code> 搜索数据 <ul><li><code>-v</code> 反向搜索</li><li><code>-n</code> 显示行号</li><li><code>-c</code> 匹配到的总行数</li><li><code>-e</code> 指定每个匹配模式 <ul><li>eg: <code>grep -e 1 -e 0 a.txt</code></li></ul></li></ul></li><li><code>tar -zxvf [fileName.tgz]</code> 解压tgz格式的文件</li><li><code>ps</code> 显示进程 <ul><li><code>-f</code> 显示PID和PPID</li><li><code>--forest</code> 嵌套显示进程关系</li></ul></li><li><code>top</code> 显示进程(动态的)</li><li><code>rpm -qa command</code> 查询命令是否安装</li><li><code>mount</code> 挂载 <ul><li>eg: <code>mount -t cifs -o username=username,password:password //192.168.50.39/share /share</code></li></ul></li><li><code>dd if=/dev/zero of=/data/biggile bs=1M count=100</code> 在data下生成100M的文件</li></ul><h2 id="创建全局变量" tabindex="-1">创建全局变量 <a class="header-anchor" href="#创建全局变量" aria-label="Permalink to &quot;创建全局变量&quot;">​</a></h2><ol><li><code>echo $my</code> 先创建局部变量</li><li><code>my=&quot;Hello&quot;</code></li><li><code>export my</code> 将局部变量导出到全局变量</li><li><code>unset my</code> 删除变量</li></ol><div class="tip custom-block"><p class="custom-block-title">提示</p><p>在子shell中修改变量的值,不会影响到父shell,删除同理</p></div><p><strong>交互式shell会去读取<code>$HOME/.bashrc</code></strong><br><strong>非交互式shell会去读取<code>BASH_ENV</code>的环境变量</strong></p><h2 id="linux文件权限" tabindex="-1">Linux文件权限 <a class="header-anchor" href="#linux文件权限" aria-label="Permalink to &quot;Linux文件权限&quot;">​</a></h2><ul><li><code>groupadd</code> 添加组</li><li><code>groupmod</code> 修改组 <ul><li><code>-n</code> 修改组名</li><li><code>-g</code> 修改GID</li></ul></li></ul><h2 id="包管理" tabindex="-1">包管理 <a class="header-anchor" href="#包管理" aria-label="Permalink to &quot;包管理&quot;">​</a></h2><ul><li><code>yum</code><ul><li><code>[fileName]</code> 安装fileName文件</li><li><code>localinstall package_name.rpm</code> 本地安装,手动下载rpm文件并用yum安装</li><li><code>list installed</code> 已安装的包</li><li><code>list updates</code> 列出需要跟新的包</li><li><code>update [package_name]</code> 对指定的软件包更新</li><li><code>update</code> 更新列表中所有的包</li><li><code>remove [package_name]</code> 删除指定的包,保留包的数据和配置文件</li><li><code>erase [package_name]</code> 删除指定的包,包括包的数据和配置文件</li></ul></li></ul><h3 id="处理损坏的包依赖关系" tabindex="-1">处理损坏的包依赖关系 <a class="header-anchor" href="#处理损坏的包依赖关系" aria-label="Permalink to &quot;处理损坏的包依赖关系&quot;">​</a></h3><ol><li>有时在安装多个软件包时，某个包的软件依赖关系可能会被另一个包的安装覆盖掉。这叫作损坏的包依赖关系,有时，只要清理了放错位置的文件就可以了 <ul><li><code>yum clean all</code></li><li><code>yum update</code></li></ul></li><li>这个命令显示了所有包的库依赖关系以及什么软件可以提供这些库依赖关系。一旦知道某个包需要的库，你就能安装它们了。 <ul><li><code>yum deplist [package_name]</code></li></ul></li><li>如果这样仍未解决问题，还有最后一招,--skip-broken选项允许你忽略依赖关系损坏的那个包，继续去更新其他软件包。这可能救不了损坏的包，但至少可以更新系统上的其他包。 <ul><li><code>yum update --skip-broken</code></li></ul></li></ol><h2 id="脚本" tabindex="-1">脚本 <a class="header-anchor" href="#脚本" aria-label="Permalink to &quot;脚本&quot;">​</a></h2><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme"><code><span class="line"><span style="color:#546E7A;font-style:italic;"># 赋值</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;"># 第一种方式:</span></span>
<span class="line"><span style="color:#EEFFFF;">val</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">$date</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#546E7A;font-style:italic;"># 第二种方式:</span></span>
<span class="line"><span style="color:#EEFFFF;">val</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">date</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#546E7A;font-style:italic;"># 运算</span></span>
<span class="line"><span style="color:#EEFFFF;">total</span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;">$</span><span style="color:#C3E88D;">[</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">*</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#EEFFFF;"> ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#546E7A;font-style:italic;"># if-then</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#EEFFFF;"> test</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">(())</span><span style="color:#EEFFFF;"> 高级数学表达式</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">[[]]</span><span style="color:#EEFFFF;"> 高级字符串比较</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><img src="`+a+'" alt="img.png"><img src="'+i+'" alt="img.png"><img src="'+c+'" alt="img.png"><img src="'+n+'" alt="img.png"></p>',21),p=[t];function r(u,m,F,b,h,y){return o(),e("div",null,p)}const _=l(d,[["render",r]]);export{g as __pageData,_ as default};
