import{_ as a,c as l,o as s,N as n}from"./chunks/framework.d9f2368f.js";const A=JSON.parse('{"title":"数据链路层","description":"","frontmatter":{},"headers":[],"relativePath":"src/network/DLL.md"}'),e={name:"src/network/DLL.md"},i=n(`<h1 id="数据链路层" tabindex="-1">数据链路层 <a class="header-anchor" href="#数据链路层" aria-label="Permalink to &quot;数据链路层&quot;">​</a></h1><ol><li>提供了通信过程中必须要有的<code>MAC</code>地址</li><li>数据链路的建立、维护、拆除</li><li>帧包装、帧传输、帧同步</li><li>帧的差错恢复</li><li>流量控制</li></ol><h2 id="交换机" tabindex="-1">交换机 <a class="header-anchor" href="#交换机" aria-label="Permalink to &quot;交换机&quot;">​</a></h2><ul><li>盒式交换机(模块和非模块)</li><li>框式交换机</li></ul><h2 id="交换机数据转发过程" tabindex="-1">交换机数据转发过程 <a class="header-anchor" href="#交换机数据转发过程" aria-label="Permalink to &quot;交换机数据转发过程&quot;">​</a></h2><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme"><code><span class="line"><span style="color:#EEFFFF;">客户端A1,客户端A2,交换机A</span></span>
<span class="line"><span style="color:#EEFFFF;">客户端B1,客户端B2,交换机B</span></span>
<span class="line"><span style="color:#EEFFFF;">客户端A1 发送数据到 客户端B1 过程:</span></span>
<span class="line"><span style="color:#EEFFFF;"></span></span>
<span class="line"><span style="color:#EEFFFF;">1. 客户端A1发送数帧据到交换机A携带MAC地址</span></span>
<span class="line"><span style="color:#EEFFFF;">2. 交换机A查找MAC表,如果没有就学习,如果有就广播(会发送给客户端A2,交换机B)</span></span>
<span class="line"><span style="color:#EEFFFF;">3. 交换B接收到后,查找MAC表,如果没有就学习,如果有就广播(会发送给客户端B1,客户端B2)</span></span>
<span class="line"><span style="color:#EEFFFF;">4. 交换机B通过MAC表查到目的MAC客户端B1,将数据帧传递个给客户端B1</span></span>
<span class="line"><span style="color:#EEFFFF;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="交换机数据转发原理" tabindex="-1">交换机数据转发原理 <a class="header-anchor" href="#交换机数据转发原理" aria-label="Permalink to &quot;交换机数据转发原理&quot;">​</a></h2><ol><li>交换机接收到数据帧后,先查看MAC地址表中是否包含源MAC地址</li><li>若MAC地址表中不包含源MAC地址,则学习(将源MAC地址与收到数据帧的端口做对应关系)</li><li>再次查看MAC地址表,寻找目的MAC地址</li><li>若无法找到目的MAC地址,则<strong>交换机广播该数据帧</strong></li><li>若能够找到MAC地址,则交换机直接发生单播,无需广播了</li></ol><h2 id="老化时间" tabindex="-1">老化时间 <a class="header-anchor" href="#老化时间" aria-label="Permalink to &quot;老化时间&quot;">​</a></h2><p>交换机的MAC地址表的老化时间为300s(可更改)</p><h2 id="lldp-link-layer-discover-prococal-链路层发现嫌疑" tabindex="-1">LLDP [Link Layer Discover Prococal] 链路层发现嫌疑 <a class="header-anchor" href="#lldp-link-layer-discover-prococal-链路层发现嫌疑" aria-label="Permalink to &quot;LLDP [Link Layer Discover Prococal] 链路层发现嫌疑&quot;">​</a></h2><ul><li>用来发现直连的邻居信息</li><li>lldp enable</li><li>display lldp neighbor [brief | interface e0/0/10]</li></ul><h2 id="vlan" tabindex="-1">VLAN <a class="header-anchor" href="#vlan" aria-label="Permalink to &quot;VLAN&quot;">​</a></h2><ol><li>VLAN [ Virtual Local Area Network | 虚拟本地区域网络] 是不受物理位置限制的一个逻辑组</li><li>为了分割广播域,隔绝广播风暴引入VLAN的概念</li><li>VLAN的优势及作用: <ol><li>有效的控制了广播域</li><li>提高了网络安全性</li><li>提高了带宽利用率</li><li>降低了网络延迟</li></ol></li></ol><h2 id="vlan的种类" tabindex="-1">VLAN的种类 <a class="header-anchor" href="#vlan的种类" aria-label="Permalink to &quot;VLAN的种类&quot;">​</a></h2><ol><li>基于端口的静态划分</li><li>基于MAC地址的动态划分</li><li>基于IP子网的动态划分</li><li>基于协议的动态划分 如发生冲突,优先级: MAC -&gt; IP -&gt; 协议 -&gt; 端口</li></ol>`,16),r=[i];function o(t,c,p,d,h,b){return s(),l("div",null,r)}const F=a(e,[["render",o]]);export{A as __pageData,F as default};
